import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import {
  Search,
  HelpCircle,
  ChevronRight,
  Star,
  ThumbsUp,
  ThumbsDown,
  MessageCircle,
  Smartphone,
  MapPin,
  CreditCard,
  Settings,
  Shield,
  Users,
  CheckCircle,
} from "lucide-react";

interface FAQItem {
  id: string;
  question: string;
  answer: string;
  category: string;
  popular: boolean;
  helpful: number;
  notHelpful: number;
  tags: string[];
}

interface FAQCategory {
  id: string;
  title: string;
  icon: any;
  count: number;
  color: string;
}

export default function FAQ() {
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);
  const [userFeedback, setUserFeedback] = useState<
    Record<string, "helpful" | "not-helpful" | null>
  >({});

  const categories: FAQCategory[] = [
    {
      id: "getting-started",
      title: "B·∫Øt ƒë·∫ßu",
      icon: HelpCircle,
      count: 12,
      color: "bg-blue-100 text-blue-700",
    },
    {
      id: "mobile-app",
      title: "·ª®ng d·ª•ng",
      icon: Smartphone,
      count: 18,
      color: "bg-green-100 text-green-700",
    },
    {
      id: "gps-tracking",
      title: "GPS & Tracking",
      icon: MapPin,
      count: 15,
      color: "bg-orange-100 text-orange-700",
    },
    {
      id: "premium",
      title: "Premium",
      icon: CreditCard,
      count: 8,
      color: "bg-yellow-100 text-yellow-700",
    },
    {
      id: "account",
      title: "T√†i kho·∫£n",
      icon: Settings,
      count: 10,
      color: "bg-purple-100 text-purple-700",
    },
    {
      id: "privacy",
      title: "B·∫£o m·∫≠t",
      icon: Shield,
      count: 6,
      color: "bg-red-100 text-red-700",
    },
    {
      id: "community",
      title: "C·ªông ƒë·ªìng",
      icon: Users,
      count: 9,
      color: "bg-pink-100 text-pink-700",
    },
  ];

  const faqs: FAQItem[] = [
    {
      id: "1",
      question: "VSM l√† g√¨ v√† ai c√≥ th·ªÉ s·ª≠ d·ª•ng?",
      answer:
        "VSM (Vietnam Student Marathon) l√† n·ªÅn t·∫£ng ch·∫°y b·ªô d√†nh ri√™ng cho sinh vi√™n Vi·ªát Nam. M·ªçi sinh vi√™n ƒëang h·ªçc t·∫°i c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc, cao ƒë·∫≥ng tr√™n to√†n qu·ªëc ƒë·ªÅu c√≥ th·ªÉ tham gia. ·ª®ng d·ª•ng gi√∫p k·∫øt n·ªëi c·ªông ƒë·ªìng ch·∫°y b·ªô sinh vi√™n, theo d√µi ho·∫°t ƒë·ªông v·ªõi GPS, tham gia c√°c s·ª± ki·ªán v√† th·ª≠ th√°ch.",
      category: "getting-started",
      popular: true,
      helpful: 247,
      notHelpful: 12,
      tags: ["c∆° b·∫£n", "sinh vi√™n", "gi·ªõi thi·ªáu"],
    },
    {
      id: "2",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ t·∫£i v√† c√†i ƒë·∫∑t ·ª©ng d·ª•ng VSM?",
      answer:
        "B·∫°n c√≥ th·ªÉ t·∫£i ·ª©ng d·ª•ng VSM mi·ªÖn ph√≠ t·ª´:\n\n‚Ä¢ App Store (iOS): T√¨m ki·∫øm 'Vietnam Student Marathon'\n‚Ä¢ Google Play Store (Android): T√¨m ki·∫øm 'VSM'\n‚Ä¢ Website: vsm.vn/download\n\nSau khi t·∫£i, m·ªü ·ª©ng d·ª•ng v√† ƒëƒÉng k√Ω t√†i kho·∫£n b·∫±ng email sinh vi√™n. ·ª®ng d·ª•ng h·ªó tr·ª£ iOS 12+ v√† Android 7+.",
      category: "mobile-app",
      popular: true,
      helpful: 189,
      notHelpful: 8,
      tags: ["t·∫£i xu·ªëng", "c√†i ƒë·∫∑t", "iOS", "Android"],
    },
    {
      id: "3",
      question: "GPS kh√¥ng ho·∫°t ƒë·ªông ho·∫∑c kh√¥ng ch√≠nh x√°c, ph·∫£i l√†m g√¨?",
      answer:
        "N·∫øu GPS kh√¥ng ho·∫°t ƒë·ªông, h√£y ki·ªÉm tra:\n\n1. **C√†i ƒë·∫∑t quy·ªÅn**: V√†o Settings > Privacy > Location Services > VSM > Always\n2. **B·∫≠t GPS**: ƒê·∫£m b·∫£o Location Services ƒë∆∞·ª£c b·∫≠t\n3. **T√≠n hi·ªáu**: Ch·∫°y ·ªü ngo√†i tr·ªùi, tr√°nh c√°c t√≤a nh√† cao\n4. **Kh·ªüi ƒë·ªông l·∫°i**: T·∫Øt v√† m·ªü l·∫°i ·ª©ng d·ª•ng\n5. **C·∫≠p nh·∫≠t**: ƒê·∫£m b·∫£o ·ª©ng d·ª•ng ·ªü phi√™n b·∫£n m·ªõi nh·∫•t\n\nN·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c, li√™n h·ªá h·ªó tr·ª£ v·ªõi th√¥ng tin thi·∫øt b·ªã.",
      category: "gps-tracking",
      popular: true,
      helpful: 156,
      notHelpful: 23,
      tags: ["GPS", "l·ªói", "kh·∫Øc ph·ª•c", "v·ªã tr√≠"],
    },
    {
      id: "4",
      question: "Premium c√≥ nh·ªØng t√≠nh nƒÉng g√¨ v√† gi√° bao nhi·ªÅu?",
      answer:
        "VSM Premium c√≥ gi√° 299,000ƒë (m·ªôt l·∫ßn, tr·ªçn ƒë·ªùi) bao g·ªìm:\n\n‚úì **Gi√°o √°n t·∫≠p luy·ªán**: Ch∆∞∆°ng tr√¨nh t·ª´ HLV chuy√™n nghi·ªáp\n‚úì **Ph√¢n t√≠ch n√¢ng cao**: VO2 Max, Training Load, Recovery\n‚úì **Segments premium**: Th·ª≠ th√°ch ƒë·ªôc quy·ªÅn\n‚úì **Voucher c·ª≠a h√†ng**: Gi·∫£m gi√° s·∫£n ph·∫©m VSM\n‚úì **H·ªó tr·ª£ ∆∞u ti√™n**: 24/7 live chat\n‚úì **Badge ƒë·∫∑c bi·ªát**: Hi·ªÉn th·ªã Premium trong c·ªông ƒë·ªìng\n‚úì **Nh√≥m ri√™ng t∆∞**: K·∫øt n·ªëi v·ªõi Premium users\n\nThanh to√°n qua QR Code, chuy·ªÉn kho·∫£n ho·∫∑c th·∫ª t√≠n d·ª•ng.",
      category: "premium",
      popular: true,
      helpful: 134,
      notHelpful: 15,
      tags: ["premium", "gi√°", "t√≠nh nƒÉng", "thanh to√°n"],
    },
    {
      id: "5",
      question: "T√¥i qu√™n m·∫≠t kh·∫©u, l√†m sao ƒë·ªÉ l·∫•y l·∫°i?",
      answer:
        "ƒê·ªÉ l·∫•y l·∫°i m·∫≠t kh·∫©u:\n\n1. M·ªü ·ª©ng d·ª•ng VSM\n2. Nh·∫•n 'ƒêƒÉng nh·∫≠p' > 'Qu√™n m·∫≠t kh·∫©u?'\n3. Nh·∫≠p email ƒëƒÉng k√Ω\n4. Ki·ªÉm tra email (k·ªÉ c·∫£ th∆∞ m·ª•c spam)\n5. Nh·∫•n link trong email\n6. T·∫°o m·∫≠t kh·∫©u m·ªõi\n\nN·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c email sau 5 ph√∫t, ki·ªÉm tra:\n‚Ä¢ Email c√≥ ƒë√∫ng kh√¥ng?\n‚Ä¢ Th∆∞ m·ª•c spam/junk\n‚Ä¢ Li√™n h·ªá support@vsm.vn n·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c",
      category: "account",
      popular: false,
      helpful: 98,
      notHelpful: 7,
      tags: ["m·∫≠t kh·∫©u", "qu√™n", "email", "reset"],
    },
    {
      id: "6",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ tham gia s·ª± ki·ªán ch·∫°y b·ªô?",
      answer:
        "ƒê·ªÉ tham gia s·ª± ki·ªán VSM:\n\n1. **T√¨m s·ª± ki·ªán**: V√†o tab 'S·ª± ki·ªán' trong ·ª©ng d·ª•ng\n2. **Ch·ªçn s·ª± ki·ªán**: Xem chi ti·∫øt, ƒë·ªãa ƒëi·ªÉm, th·ªùi gian\n3. **ƒêƒÉng k√Ω**: Nh·∫•n 'ƒêƒÉng k√Ω' v√† ƒëi·ªÅn th√¥ng tin\n4. **Thanh to√°n**: N·∫øu c√≥ ph√≠ tham gia\n5. **X√°c nh·∫≠n**: Nh·∫≠n email x√°c nh·∫≠n\n6. **Chu·∫©n b·ªã**: Theo h∆∞·ªõng d·∫´n tr∆∞·ªõc s·ª± ki·ªán\n\nS·ª± ki·ªán free th∆∞·ªùng l√† fun run, c√≤n marathon ch√≠nh th·ª©c c√≥ ph√≠. Early bird th∆∞·ªùng ƒë∆∞·ª£c gi·∫£m gi√° 20-30%.",
      category: "community",
      popular: false,
      helpful: 76,
      notHelpful: 5,
      tags: ["s·ª± ki·ªán", "ƒëƒÉng k√Ω", "marathon", "fun run"],
    },
    {
      id: "7",
      question: "D·ªØ li·ªáu c√° nh√¢n c·ªßa t√¥i c√≥ an to√†n kh√¥ng?",
      answer:
        "VSM cam k·∫øt b·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n c·ªßa b·∫°n:\n\nüîí **M√£ h√≥a**: T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a AES-256\nüîí **L∆∞u tr·ªØ**: Server t·∫°i Vi·ªát Nam, tu√¢n th·ªß lu·∫≠t Cybersecurity\nüîí **Kh√¥ng chia s·∫ª**: Kh√¥ng b√°n d·ªØ li·ªáu cho b√™n th·ª© ba\nüîí **Quy·ªÅn ki·ªÉm so√°t**: B·∫°n c√≥ th·ªÉ x√≥a d·ªØ li·ªáu b·∫•t c·ª© l√∫c n√†o\nüîí **Ki·ªÉm to√°n**: ƒê∆∞·ª£c ki·ªÉm to√°n b·∫£o m·∫≠t ƒë·ªãnh k·ª≥\n\nB·∫°n c√≥ th·ªÉ t·∫£i v·ªÅ ho·∫∑c x√≥a d·ªØ li·ªáu trong Settings > Privacy > Data Management.",
      category: "privacy",
      popular: false,
      helpful: 67,
      notHelpful: 3,
      tags: ["b·∫£o m·∫≠t", "d·ªØ li·ªáu", "privacy", "GDPR"],
    },
    {
      id: "8",
      question: "·ª®ng d·ª•ng c√≥ ho·∫°t ƒë·ªông offline kh√¥ng?",
      answer:
        "VSM c√≥ th·ªÉ ho·∫°t ƒë·ªông offline h·∫°n ch·∫ø:\n\n‚úì **C√≥ th·ªÉ offline**:\n‚Ä¢ Theo d√µi GPS v√† ghi nh·∫≠n ho·∫°t ƒë·ªông\n‚Ä¢ Xem d·ªØ li·ªáu ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥\n‚Ä¢ S·ª≠ d·ª•ng timer v√† stopwatch\n\n‚ùå **C·∫ßn internet**:\n‚Ä¢ ƒê·ªìng b·ªô d·ªØ li·ªáu l√™n cloud\n‚Ä¢ Xem feed v√† ho·∫°t ƒë·ªông c·ªßa b·∫°n b√®\n‚Ä¢ Tham gia challenges v√† events\n‚Ä¢ C·∫≠p nh·∫≠t th√¥ng tin profile\n‚Ä¢ S·ª≠ d·ª•ng maps v√† directions\n\nKhi c√≥ internet tr·ªü l·∫°i, d·ªØ li·ªáu s·∫Ω t·ª± ƒë·ªông ƒë·ªìng b·ªô.",
      category: "mobile-app",
      popular: false,
      helpful: 54,
      notHelpful: 8,
      tags: ["offline", "internet", "ƒë·ªìng b·ªô", "GPS"],
    },
    {
      id: "9",
      question: "T·∫°i sao pace/distance kh√¥ng ch√≠nh x√°c?",
      answer:
        'ƒê·ªô ch√≠nh x√°c c·ªßa GPS c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng b·ªüi:\n\n**Nguy√™n nh√¢n ph·ªï bi·∫øn**:\n‚Ä¢ T√≠n hi·ªáu GPS y·∫øu (trong nh√†, d∆∞·ªõi g·∫ßm c·∫ßu)\n‚Ä¢ Th·ªùi ti·∫øt x·∫•u (m∆∞a to, m√¢y d√†y)\n‚Ä¢ ƒê·∫∑t ƒëi·ªán tho·∫°i trong t√∫i k√≠n\n‚Ä¢ Pin y·∫øu ho·∫∑c nhi·ªÅu app ch·∫°y n·ªÅn\n\n**C√°ch c·∫£i thi·ªán**:\n‚Ä¢ Ch·∫°y ·ªü ngo√†i tr·ªùi tho√°ng ƒë√£ng\n‚Ä¢ ƒê·ª£i GPS "lock" tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu\n‚Ä¢ C·∫ßm ƒëi·ªán tho·∫°i ho·∫∑c ƒëeo tr√™n tay\n‚Ä¢ T·∫Øt c√°c ·ª©ng d·ª•ng kh√¥ng c·∫ßn thi·∫øt\n‚Ä¢ B·∫≠t High Accuracy GPS trong Settings\n\nƒê·ªô l·ªách 3-5% l√† b√¨nh th∆∞·ªùng v·ªõi GPS th√¥ng th∆∞·ªùng.',
      category: "gps-tracking",
      popular: false,
      helpful: 43,
      notHelpful: 12,
      tags: ["GPS", "pace", "distance", "ƒë·ªô ch√≠nh x√°c"],
    },
    {
      id: "10",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ k·∫øt n·ªëi v·ªõi b·∫°n b√®?",
      answer:
        "ƒê·ªÉ k·∫øt n·ªëi v·ªõi b·∫°n b√® tr√™n VSM:\n\n**C√°ch 1: T√¨m ki·∫øm**\n‚Ä¢ V√†o tab 'C·ªông ƒë·ªìng'\n‚Ä¢ Nh·∫•n 'T√¨m b·∫°n b√®'\n‚Ä¢ T√¨m theo t√™n ho·∫∑c email\n\n**C√°ch 2: Contacts**\n‚Ä¢ Cho ph√©p truy c·∫≠p danh b·∫°\n‚Ä¢ VSM s·∫Ω t·ª± ƒë·ªông ƒë·ªÅ xu·∫•t\n\n**C√°ch 3: QR Code**\n‚Ä¢ Qu√©t QR code c·ªßa b·∫°n b√®\n‚Ä¢ Ho·∫∑c chia s·∫ª QR c·ªßa b·∫°n\n\n**C√°ch 4: Nh√≥m tr∆∞·ªùng**\n‚Ä¢ Tham gia nh√≥m tr∆∞·ªùng ƒë·∫°i h·ªçc\n‚Ä¢ K·∫øt n·ªëi v·ªõi sinh vi√™n c√πng tr∆∞·ªùng\n\nSau khi k·∫øt b·∫°n, b·∫°n c√≥ th·ªÉ xem activities, kudos v√† comment.",
      category: "community",
      popular: false,
      helpful: 38,
      notHelpful: 4,
      tags: ["b·∫°n b√®", "k·∫øt n·ªëi", "QR code", "nh√≥m"],
    },
  ];

  const filteredFAQs = faqs.filter((faq) => {
    const matchesSearch =
      faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      faq.answer.toLowerCase().includes(searchQuery.toLowerCase()) ||
      faq.tags.some((tag) =>
        tag.toLowerCase().includes(searchQuery.toLowerCase()),
      );
    const matchesCategory =
      selectedCategory === "all" || faq.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const popularFAQs = faqs.filter((faq) => faq.popular);

  const handleFeedback = (faqId: string, type: "helpful" | "not-helpful") => {
    setUserFeedback((prev) => ({
      ...prev,
      [faqId]: type,
    }));
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
          <div className="text-center max-w-3xl mx-auto">
            <HelpCircle className="w-16 h-16 mx-auto mb-6 opacity-90" />
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              C√¢u h·ªèi th∆∞·ªùng g·∫∑p
            </h1>
            <p className="text-xl opacity-90 mb-8">
              T√¨m c√¢u tr·∫£ l·ªùi nhanh ch√≥ng cho c√°c v·∫•n ƒë·ªÅ ph·ªï bi·∫øn khi s·ª≠ d·ª•ng
              VSM
            </p>

            {/* Search */}
            <div className="relative max-w-2xl mx-auto">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-white/70 w-5 h-5" />
              <Input
                type="text"
                placeholder="T√¨m ki·∫øm c√¢u h·ªèi..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-12 pr-4 h-14 text-lg bg-white/10 backdrop-blur-sm border-white/20 text-white placeholder-white/70"
              />
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        {/* Popular FAQs */}
        {!searchQuery && selectedCategory === "all" && (
          <Card className="mb-8 -mt-20 relative z-10 shadow-xl">
            <CardHeader>
              <CardTitle className="flex items-center">
                <Star className="w-5 h-5 mr-2 text-yellow-500" />
                C√¢u h·ªèi ph·ªï bi·∫øn nh·∫•t
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-4">
                {popularFAQs.map((faq) => (
                  <div
                    key={faq.id}
                    onClick={() => setExpandedFAQ(faq.id)}
                    className="p-4 border rounded-lg hover:shadow-md cursor-pointer transition-shadow"
                  >
                    <h3 className="font-medium text-gray-800 mb-2">
                      {faq.question}
                    </h3>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <div className="flex items-center space-x-1">
                        <ThumbsUp className="w-4 h-4" />
                        <span>{faq.helpful}</span>
                      </div>
                      <Badge variant="secondary">
                        {categories.find((c) => c.id === faq.category)?.title}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        <div className="grid lg:grid-cols-4 gap-8">
          {/* Categories Sidebar */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>Danh m·ª•c</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <Button
                  variant={selectedCategory === "all" ? "default" : "ghost"}
                  onClick={() => setSelectedCategory("all")}
                  className={`w-full justify-start ${
                    selectedCategory === "all"
                      ? "bg-vsm-orange hover:bg-vsm-orange-dark"
                      : ""
                  }`}
                >
                  <HelpCircle className="w-4 h-4 mr-2" />
                  T·∫•t c·∫£ ({faqs.length})
                </Button>

                {categories.map((category) => {
                  const IconComponent = category.icon;
                  return (
                    <Button
                      key={category.id}
                      variant={
                        selectedCategory === category.id ? "default" : "ghost"
                      }
                      onClick={() => setSelectedCategory(category.id)}
                      className={`w-full justify-start ${
                        selectedCategory === category.id
                          ? "bg-vsm-orange hover:bg-vsm-orange-dark"
                          : ""
                      }`}
                    >
                      <IconComponent className="w-4 h-4 mr-2" />
                      {category.title} ({category.count})
                    </Button>
                  );
                })}
              </CardContent>
            </Card>
          </div>

          {/* FAQ Content */}
          <div className="lg:col-span-3">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-800">
                {selectedCategory === "all"
                  ? "T·∫•t c·∫£ c√¢u h·ªèi"
                  : categories.find((c) => c.id === selectedCategory)?.title}
              </h2>
              <Badge variant="secondary">{filteredFAQs.length} k·∫øt qu·∫£</Badge>
            </div>

            {filteredFAQs.length > 0 ? (
              <div className="space-y-4">
                {filteredFAQs.map((faq) => (
                  <Card
                    key={faq.id}
                    className="hover:shadow-md transition-shadow"
                  >
                    <CardContent className="p-0">
                      <button
                        onClick={() =>
                          setExpandedFAQ(expandedFAQ === faq.id ? null : faq.id)
                        }
                        className="w-full p-6 text-left hover:bg-gray-50 transition-colors"
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-2">
                              <h3 className="font-semibold text-gray-800">
                                {faq.question}
                              </h3>
                              {faq.popular && (
                                <Badge className="bg-yellow-100 text-yellow-700">
                                  <Star className="w-3 h-3 mr-1" />
                                  Ph·ªï bi·∫øn
                                </Badge>
                              )}
                            </div>
                            <div className="flex items-center space-x-4 text-sm text-gray-500">
                              <span>
                                {
                                  categories.find((c) => c.id === faq.category)
                                    ?.title
                                }
                              </span>
                              <div className="flex items-center space-x-1">
                                <ThumbsUp className="w-4 h-4" />
                                <span>{faq.helpful}</span>
                              </div>
                              <div className="flex flex-wrap gap-1">
                                {faq.tags.slice(0, 2).map((tag) => (
                                  <Badge
                                    key={tag}
                                    variant="outline"
                                    className="text-xs"
                                  >
                                    {tag}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          </div>
                          <ChevronRight
                            className={`w-5 h-5 text-gray-400 transition-transform ${
                              expandedFAQ === faq.id ? "rotate-90" : ""
                            }`}
                          />
                        </div>
                      </button>

                      {expandedFAQ === faq.id && (
                        <div className="px-6 pb-6 border-t bg-gray-50">
                          <div className="pt-6">
                            <div className="prose prose-gray max-w-none">
                              <p className="text-gray-700 leading-relaxed whitespace-pre-line">
                                {faq.answer}
                              </p>
                            </div>

                            {/* Feedback */}
                            <div className="mt-6 pt-4 border-t border-gray-200">
                              <p className="text-sm text-gray-600 mb-3">
                                C√¢u tr·∫£ l·ªùi n√†y c√≥ h·ªØu √≠ch kh√¥ng?
                              </p>
                              <div className="flex items-center space-x-4">
                                <Button
                                  size="sm"
                                  variant={
                                    userFeedback[faq.id] === "helpful"
                                      ? "default"
                                      : "outline"
                                  }
                                  onClick={() =>
                                    handleFeedback(faq.id, "helpful")
                                  }
                                  className={
                                    userFeedback[faq.id] === "helpful"
                                      ? "bg-green-600 hover:bg-green-700"
                                      : ""
                                  }
                                >
                                  <ThumbsUp className="w-4 h-4 mr-1" />
                                  C√≥ ({faq.helpful})
                                </Button>
                                <Button
                                  size="sm"
                                  variant={
                                    userFeedback[faq.id] === "not-helpful"
                                      ? "default"
                                      : "outline"
                                  }
                                  onClick={() =>
                                    handleFeedback(faq.id, "not-helpful")
                                  }
                                  className={
                                    userFeedback[faq.id] === "not-helpful"
                                      ? "bg-red-600 hover:bg-red-700"
                                      : ""
                                  }
                                >
                                  <ThumbsDown className="w-4 h-4 mr-1" />
                                  Kh√¥ng ({faq.notHelpful})
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <Card>
                <CardContent className="p-12 text-center">
                  <Search className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold text-gray-600 mb-2">
                    Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£
                  </h3>
                  <p className="text-gray-500 mb-6">
                    Th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c xem t·∫•t c·∫£ c√¢u h·ªèi
                  </p>
                  <div className="space-x-4">
                    <Button
                      onClick={() => {
                        setSearchQuery("");
                        setSelectedCategory("all");
                      }}
                      variant="outline"
                    >
                      Xem t·∫•t c·∫£
                    </Button>
                    <Button className="bg-vsm-orange hover:bg-vsm-orange-dark text-white">
                      <MessageCircle className="w-4 h-4 mr-2" />
                      Li√™n h·ªá h·ªó tr·ª£
                    </Button>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </div>

        {/* Contact CTA */}
        <Card className="mt-12 bg-gradient-to-r from-vsm-orange/10 to-orange-100 border-vsm-orange/20">
          <CardContent className="p-8 text-center">
            <MessageCircle className="w-12 h-12 text-vsm-orange mx-auto mb-4" />
            <h3 className="text-2xl font-bold text-vsm-black mb-2">
              V·∫´n ch∆∞a t√¨m th·∫•y c√¢u tr·∫£ l·ªùi?
            </h3>
            <p className="text-gray-600 mb-6">
              ƒê·ªôi ng≈© h·ªó tr·ª£ VSM lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n 24/7
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button className="bg-vsm-orange hover:bg-vsm-orange-dark text-white">
                <MessageCircle className="w-5 h-5 mr-2" />
                Live Chat
              </Button>
              <Button variant="outline">G·ª≠i email h·ªó tr·ª£</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
