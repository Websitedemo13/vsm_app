import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import {
  ShoppingCart,
  Star,
  Filter,
  Search,
  Heart,
  Grid3X3,
  List,
  Ticket,
  Gift,
  Percent,
  Tag,
  CheckCircle
} from "lucide-react";

export default function Store() {
  const [cartCount, setCartCount] = useState(0);
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");

  const categories = ["T·∫•t c·∫£", "√Åo thun", "Gi√†y ch·∫°y", "Ph·ª• ki·ªán", "ƒê·ªì u·ªëng", "Thi·∫øt b·ªã"];
  
  const products = [
    {
      id: 1,
      name: "√Åo thun VSM Runner 2024",
      price: "299,000",
      originalPrice: "399,000",
      image: "üëï",
      rating: 4.8,
      reviews: 124,
      category: "√Åo thun",
      badge: "B√°n ch·∫°y",
      description: "√Åo thun ch·∫°y b·ªô ch√≠nh th·ª©c VSM v·ªõi ch·∫•t li·ªáu th·∫•m h√∫t m·ªì h√¥i t·ªët"
    },
    {
      id: 2,
      name: "Gi√†y ch·∫°y VSM Speed Pro",
      price: "1,299,000",
      originalPrice: "1,599,000",
      image: "üëü",
      rating: 4.9,
      reviews: 89,
      category: "Gi√†y ch·∫°y",
      badge: "M·ªõi nh·∫•t",
      description: "Gi√†y ch·∫°y b·ªô chuy√™n nghi·ªáp v·ªõi c√¥ng ngh·ªá ƒë·ªám air v√† thi·∫øt k·∫ø nh·∫π"
    },
    {
      id: 3,
      name: "B√¨nh n∆∞·ªõc VSM Hydro",
      price: "149,000",
      originalPrice: "",
      image: "ü•§",
      rating: 4.7,
      reviews: 203,
      category: "Ph·ª• ki·ªán",
      badge: "",
      description: "B√¨nh n∆∞·ªõc th·ªÉ thao gi·ªØ nhi·ªát 12 ti·∫øng v·ªõi thi·∫øt k·∫ø ergonomic"
    },
    {
      id: 4,
      name: "N√≥n k·∫øt VSM Classic",
      price: "199,000",
      originalPrice: "249,000",
      image: "üß¢",
      rating: 4.6,
      reviews: 67,
      category: "Ph·ª• ki·ªán",
      badge: "Gi·∫£m gi√°",
      description: "N√≥n k·∫øt th·ªÉ thao v·ªõi kh·∫£ nƒÉng ch·ªëng UV v√† th√¥ng tho√°ng t·ªëi ∆∞u"
    },
    {
      id: 5,
      name: "V·ªõ ch·∫°y b·ªô VSM Comfort",
      price: "89,000",
      originalPrice: "",
      image: "üß¶",
      rating: 4.5,
      reviews: 156,
      category: "Ph·ª• ki·ªán",
      badge: "",
      description: "V·ªõ ch·∫°y b·ªô ch·ªëng tr∆∞·ª£t v·ªõi c√¥ng ngh·ªá kh√°ng khu·∫©n v√† th·∫•m h√∫t"
    },
    {
      id: 6,
      name: "T√∫i ch·∫°y b·ªô VSM Ultra",
      price: "399,000",
      originalPrice: "499,000",
      image: "üéí",
      rating: 4.8,
      reviews: 91,
      category: "Ph·ª• ki·ªán",
      badge: "Hot",
      description: "T√∫i ch·∫°y b·ªô nh·∫π v·ªõi nhi·ªÅu ngƒÉn, ph·∫£n quang v√† kh·∫£ nƒÉng ch·ªëng n∆∞·ªõc"
    }
  ];

  const addToCart = (productId: number) => {
    setCartCount(prev => prev + 1);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-vsm-black">C·ª≠a h√†ng VSM</h1>
              <p className="text-vsm-gray-medium">S·∫£n ph·∫©m ch·∫°y b·ªô ch√≠nh h√£ng cho sinh vi√™n</p>
            </div>
            <Button className="relative bg-vsm-orange hover:bg-vsm-orange-dark text-white">
              <ShoppingCart className="w-5 h-5 mr-2" />
              Gi·ªè h√†ng
              {cartCount > 0 && (
                <Badge className="absolute -top-2 -right-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                  {cartCount}
                </Badge>
              )}
            </Button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filter */}
        <div className="flex flex-col md:flex-row gap-4 mb-8">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
            <Input 
              placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..." 
              className="pl-10"
            />
          </div>
          <div className="flex items-center gap-4">
            <Button variant="outline" size="sm">
              <Filter className="w-4 h-4 mr-2" />
              B·ªô l·ªçc
            </Button>
            <div className="flex border rounded-lg">
              <Button
                variant={viewMode === "grid" ? "default" : "ghost"}
                size="sm"
                onClick={() => setViewMode("grid")}
                className={viewMode === "grid" ? "bg-vsm-orange hover:bg-vsm-orange-dark" : ""}
              >
                <Grid3X3 className="w-4 h-4" />
              </Button>
              <Button
                variant={viewMode === "list" ? "default" : "ghost"}
                size="sm"
                onClick={() => setViewMode("list")}
                className={viewMode === "list" ? "bg-vsm-orange hover:bg-vsm-orange-dark" : ""}
              >
                <List className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>

        {/* Categories */}
        <div className="flex flex-wrap gap-2 mb-8">
          {categories.map((category) => (
            <Button
              key={category}
              variant={category === "T·∫•t c·∫£" ? "default" : "outline"}
              size="sm"
              className={category === "T·∫•t c·∫£" ? "bg-vsm-orange hover:bg-vsm-orange-dark" : ""}
            >
              {category}
            </Button>
          ))}
        </div>

        {/* Products Grid */}
        <div className={`grid gap-6 ${
          viewMode === "grid" 
            ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3" 
            : "grid-cols-1"
        }`}>
          {products.map((product) => (
            <Card key={product.id} className="overflow-hidden hover:shadow-lg transition-shadow group">
              {viewMode === "grid" ? (
                <>
                  <div className="relative">
                    <div className="aspect-square bg-gradient-to-br from-vsm-orange/20 to-vsm-orange/40 flex items-center justify-center text-6xl">
                      {product.image}
                    </div>
                    {product.badge && (
                      <Badge className="absolute top-3 left-3 bg-red-500 text-white">
                        {product.badge}
                      </Badge>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      className="absolute top-3 right-3 text-gray-400 hover:text-red-500"
                    >
                      <Heart className="w-5 h-5" />
                    </Button>
                  </div>
                  
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg leading-tight group-hover:text-vsm-orange transition-colors">
                      {product.name}
                    </CardTitle>
                    <div className="flex items-center space-x-2">
                      <div className="flex items-center">
                        <Star className="w-4 h-4 text-yellow-400 fill-current" />
                        <span className="text-sm text-gray-600 ml-1">{product.rating}</span>
                      </div>
                      <span className="text-sm text-gray-500">({product.reviews} ƒë√°nh gi√°)</span>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="pt-0">
                    <p className="text-gray-600 text-sm mb-4">{product.description}</p>
                    
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-2">
                        <span className="text-xl font-bold text-vsm-orange">
                          {product.price}ƒë
                        </span>
                        {product.originalPrice && (
                          <span className="text-sm text-gray-500 line-through">
                            {product.originalPrice}ƒë
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <Button 
                      onClick={() => addToCart(product.id)}
                      className="w-full bg-vsm-orange hover:bg-vsm-orange-dark text-white"
                    >
                      <ShoppingCart className="w-4 h-4 mr-2" />
                      Th√™m v√†o gi·ªè
                    </Button>
                  </CardContent>
                </>
              ) : (
                <div className="flex">
                  <div className="w-32 h-32 bg-gradient-to-br from-vsm-orange/20 to-vsm-orange/40 flex items-center justify-center text-4xl flex-shrink-0">
                    {product.image}
                  </div>
                  <div className="flex-1 p-6">
                    <div className="flex justify-between items-start mb-2">
                      <CardTitle className="text-lg leading-tight group-hover:text-vsm-orange transition-colors">
                        {product.name}
                      </CardTitle>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-gray-400 hover:text-red-500"
                      >
                        <Heart className="w-5 h-5" />
                      </Button>
                    </div>
                    
                    <div className="flex items-center space-x-2 mb-2">
                      <div className="flex items-center">
                        <Star className="w-4 h-4 text-yellow-400 fill-current" />
                        <span className="text-sm text-gray-600 ml-1">{product.rating}</span>
                      </div>
                      <span className="text-sm text-gray-500">({product.reviews} ƒë√°nh gi√°)</span>
                      {product.badge && (
                        <Badge className="bg-red-500 text-white text-xs">
                          {product.badge}
                        </Badge>
                      )}
                    </div>
                    
                    <p className="text-gray-600 text-sm mb-4">{product.description}</p>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <span className="text-xl font-bold text-vsm-orange">
                          {product.price}ƒë
                        </span>
                        {product.originalPrice && (
                          <span className="text-sm text-gray-500 line-through">
                            {product.originalPrice}ƒë
                          </span>
                        )}
                      </div>
                      <Button 
                        onClick={() => addToCart(product.id)}
                        className="bg-vsm-orange hover:bg-vsm-orange-dark text-white"
                      >
                        <ShoppingCart className="w-4 h-4 mr-2" />
                        Th√™m v√†o gi·ªè
                      </Button>
                    </div>
                  </div>
                </div>
              )}
            </Card>
          ))}
        </div>

        {/* Load More */}
        <div className="text-center mt-12">
          <Button className="bg-vsm-orange hover:bg-vsm-orange-dark text-white px-8">
            Xem th√™m s·∫£n ph·∫©m
          </Button>
        </div>
      </div>
    </div>
  );
}
